#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

SCRIPT_DIR=$(dirname $0)
SCRIPT_DIR=$(readlink -e ${SCRIPT_DIR})

CRUCIBLE_CONFIG="/etc/sysconfig/crucible"

. ${SCRIPT_DIR}/base

source "${CRUCIBLE_CONFIG}"

if [ -z "${CRUCIBLE_HOME}" ]; then
    echo "ERROR: CRUCIBLE_HOME not defined in ${CRUCIBLE_CONFIG}"
    exit 1
fi

if [ ! -d "${CRUCIBLE_HOME}" ]; then
    echo "ERROR: CRUCIBLE_HOME (${CRUCIBLE_HOME}) does not exist.  Is Crucible installed?"
    exit 1
fi

CRUCIBLE_CLIENT_SERVER_REPO_LOCATION=""
if echo "${CRUCIBLE_CLIENT_SERVER_REPO}" | grep -q "dir:"; then
    CRUCIBLE_CLIENT_SERVER_REPO_LOCATION="local"
    CRUCIBLE_CLIENT_SERVER_REPO=$(echo "${CRUCIBLE_CLIENT_SERVER_REPO}" | sed -e "s/dir://" -e 's|/client-server$||')
elif echo "${CRUCIBLE_CLIENT_SERVER_REPO}" | grep -q "quay.io"; then
    CRUCIBLE_CLIENT_SERVER_REPO_LOCATION="quay.io"
else
    CRUCIBLE_CLIENT_SERVER_REPO_LOCATION="microk8s"
fi

CI_RUN_ENVIRONMENT="standalone"

CI_SCENARIOS="fio"

CI_USERENVS="default"

CI_SAMPLES=""

CI_REPEAT_RUNS=""

CI_ENDPOINT="remotehost"

CI_VERBOSE=0

CI_ENDPOINT_HOST="localhost"

CI_ENDPOINT_USER="root"

CI_RUN_UPDATE="yes"

CI_BUILD_CONTROLLER="no"

CI_PARAM_MODE="mv-params"

longopts="verbose,scenarios:,userenvs:,samples:,repeat-runs:,run-environment:,ci-endpoint:,ci-endpoint-host:,ci-endpoint-user:,ci-build-controller:"
longopts+=",ci-param-mode:,disable-update-test"
opts=$(getopt -q -o "" --longoptions "${longopts}" -n "$0" -- "$@")
if [ ${?} -ne 0 ]; then
    echo "ERROR: Unrecognized option specified: $@"
    exit 1
fi
eval set -- "${opts}"
while true; do
    case "${1}" in
        --ci-param-mode)
            shift
            CI_PARAM_MODE="${1}"
            shift
            ;;
        --ci-build-controller)
            shift
            CI_BUILD_CONTROLLER="${1}"
            shift
            ;;
        --disable-update-test)
            shift
            CI_RUN_UPDATE="no"
            ;;
        --ci-endpoint-user)
            shift
            CI_ENDPOINT_USER="${1}"
            shift
            ;;
        --ci-endpoint-host)
            shift
            CI_ENDPOINT_HOST="${1}"
            shift
            ;;
        --ci-endpoint)
            shift
            CI_ENDPOINT="${1}"
            shift
            ;;
        --run-environment)
            shift
            CI_RUN_ENVIRONMENT="${1}"
            shift
            ;;
        --scenarios)
            shift
            CI_SCENARIOS="${1}"
            shift
            ;;
        --userenvs)
            shift
            CI_USERENVS="${1}"
            shift
            ;;
        --samples)
            shift
            CI_SAMPLES="${1}"
            shift
            ;;
        --repeat-runs)
            shift
            CI_REPEAT_RUNS="${1}"
            shift
            ;;
        --verbose)
            shift
            CI_VERBOSE=1
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "ERROR: Unexpected argument [${1}]"
            shift
            break
            ;;
    esac
done

# validate inputs
validate_ci_run_environment
validate_ci_endpoint
validate_ci_build_controller

for scenario in $(echo "${CI_SCENARIOS}" | sed -e "s/,/ /g"); do
    case "${scenario}" in
        fio|uperf|iperf|oslat|cyclictest)
            ;;
        *)
            echo "ERROR: Unknown CI scenario [${scenario}]"
            exit 1
            ;;
    esac
done

if [ -n "${CI_REPEAT_RUNS}" ]; then
    case "${CI_REPEAT_RUNS}" in
        yes|no)
            ;;
        *)
            echo "ERROR: Unknown value for --repeat-runs [${CI_REPEAT_RUNS}].  Acceptable values are 'yes' and 'no'."
            exit 1
            ;;
    esac
fi

CI_ACTIVE_USERENVS=""
for userenv in $(echo "${CI_USERENVS}" | sed -e "s/,/ /g"); do
    case "${userenv}" in
        default)
            CI_ACTIVE_USERENVS+="${userenv} "
            ;;
        all)
            CI_ACTIVE_USERENVS=""
            for userenv in $(pushd /opt/crucible/subprojects/core/rickshaw/userenvs > /dev/null; ls -1 *.json; popd > /dev/null); do
                userenv=$(echo "${userenv}" | sed -e "s/\.json$//")
                CI_ACTIVE_USERENVS+="${userenv} "
            done
            break
            ;;
        *)
            if [ -e /opt/crucible/subprojects/core/rickshaw/userenvs/${userenv}.json ]; then
                CI_ACTIVE_USERENVS+="${userenv} "
            else
                echo "ERROR: Unknown userenv specified [${userenv}]"
                exit 1
            fi
            ;;
    esac
done

case "${CI_ENDPOINT}" in
    k8s)
        echo
        header="Determining K8S type"
        start_github_group "${header}"
        echo "${header}"
        echo

        if do_ssh ${CI_ENDPOINT_USER}@${CI_ENDPOINT_HOST} oc cluster-info; then
            CI_K8S_TYPE="OCP"
            echo "K8S type is OpenShift"
        elif do_ssh ${CI_ENDPOINT_USER}@${CI_ENDPOINT_HOST} microk8s kubectl cluster-info; then
            CI_K8S_TYPE="MICROK8S"
            echo "K8S type is MicroK8S"
        elif do_ssh ${CI_ENDPOINT_USER}@${CI_ENDPOINT_HOST} kubectl cluster-info; then
            CI_K8S_type="GENERIC"
            echo "K8S type is generic"
        else
            echo "ERROR: Could not determine K8S type"
            exit 1
        fi

        echo
        stop_github_group
esac

function post_run_cmd {
    run_and_capture_cmd "crucible extract run-id /var/lib/crucible/run/latest"
    local run_id="${captured_output}"

    run_and_capture_cmd "crucible extract primary-periods /var/lib/crucible/run/latest"
    local primary_periods="${captured_output}"

    if [ ${RC_STATUS} == 0 -a -n "${primary_periods}" ]; then
        tmp_file=$(mktemp)
        echo -e "${primary_periods}" > ${tmp_file}

        OLD_IFS=${IFS}
        while IFS=$'\n' read -r -u 9 line; do
            echo -e "${line}\n"

            period_id=$(echo "${line}" | awk '{ print $1 }')

            run_cmd "crucible get metric --run ${run_id} --period ${period_id} --source mpstat --type Busy-CPU --breakout cstype,csid"

            echo
        done 9< ${tmp_file}
        IFS=${OLD_IFS}

        rm ${tmp_file}
    fi

    run_cmd "crucible rm --run ${run_id}"

    run_cmd "crucible ls --result-dir /var/lib/crucible/run/latest --type run-id"

    run_cmd "crucible ls --result-dir /var/lib/crucible/run/latest"

    run_cmd "crucible tags --result-dir /var/lib/crucible/run/latest"

    run_cmd "crucible tags --result-dir /var/lib/crucible/run/latest --action add --tags crucible-ci:post_run_cmd --tags testing1:value1 --tags testing2:value2"

    run_cmd "crucible tags --result-dir /var/lib/crucible/run/latest --action remove --tags testing1 --tags testing2"

    # shutdown ES before each run to free up memory for image building
    run_cmd "crucible stop es"
}

function remove_microk8s_images {
    local rc=1

    for image in $(do_ssh ${CI_ENDPOINT_USER}@${CI_ENDPOINT_HOST} microk8s ctr images list "name~=client-server" | grep -v REF | awk '{ print $1 }'); do
        do_ssh ${CI_ENDPOINT_USER}@${CI_ENDPOINT_HOST} microk8s ctr images remove --sync ${image}
        rc=$?

        if [ ${rc} != 0 ]; then
            echo "ERROR: Could not remove ${image} from microk8s registry"
            break
        fi
    done

    return ${rc}
}

if [ "${CI_BUILD_CONTROLLER}" == "yes" ]; then
    run_cmd "crucible wrapper /opt/crucible/workshop/build-controller.sh"

    run_and_capture_cmd "podman images"
    podman_images="${captured_output}"

    if [ ${RC_STATUS} == 0 -a -n "${podman_images}" ]; then
        header="Identifying New Crucible Controller Image"
        start_github_group "${header}"
        echo "${header}"
        echo

        controller_image_line=$(echo "${podman_images}" | grep crucible-controller)

        if [ -n "${controller_image_line}" ]; then
            controller_image=$(echo "${controller_image_line}" | awk '{ print $1":"$2 }')
            echo "New controller image name: ${controller_image}"
        else
            echo "ERROR: Failed to isolate new Crucible controller image"
            RC_STATUS=1
        fi

        stop_github_group
    fi

    run_cmd "sed -i -e s#^\(CRUCIBLE_CONTAINER_IMAGE=\).*#\1${controller_image}# /etc/sysconfig/crucible"
fi

run_cmd "cat /etc/sysconfig/crucible"

run_cmd "crucible help"

run_cmd "crucible repo info"

for action in start stop; do
    for service in httpd es redis; do
        run_cmd "podman ps --all --external"

        run_cmd "crucible ${action} ${service}"
    done
done
run_cmd "podman ps --all --external"

# some endpoints (such as k8s) will require a "remote" address for the
# controller to allow connectivity from separate network namespaces
# (ie. a pod); provide this by determining which device is used for
# the default route and then getting the IP address for this device;
# then below this information can be used where needed
CONTROLLER_DEFAULT_ROUTE_DEV=$(ip route | grep default | sed -E "s/.*dev\s(\w+)\s.*/\1/")
CONTROLLER_IP=$(ip addr show dev ${CONTROLLER_DEFAULT_ROUTE_DEV} | egrep "inet\s" | sed -E "s/.*inet\s([0-9\.]+)\/.*/\1/")

for userenv in ${CI_ACTIVE_USERENVS}; do
    if [ ${CI_VERBOSE} == 0 -a ${RC_STATUS} != 0 ]; then
        break
    fi

    header="Current userenv is ${userenv}"
    start_github_group "${header}"
    echo -e "*** ${header} ***\n"
    echo
    echo "Configuring run parameters based on userenv:"

    if [ -z "${CI_SAMPLES}" ]; then
        if [ "${userenv}" == "default" ]; then
            CI_SAMPLES=3
        else
            CI_SAMPLES=1
        fi
    fi

    if [ -z "${CI_REPEAT_RUNS}" ]; then
        if [ "${userenv}" == "default" ]; then
            CI_REPEAT_RUNS="yes"
        else
            CI_REPEAT_RUNS="no"
        fi
    fi
    echo "Samples = ${CI_SAMPLES}"
    echo "Repeat Runs = ${CI_REPEAT_RUNS}"
    stop_github_group

    for scenario in $(echo "${CI_SCENARIOS}" | sed -e "s/,/ /g"); do
        if [ ${CI_VERBOSE} == 0 -a ${RC_STATUS} != 0 ]; then
            break
        fi

        header="Current scenario is ${scenario}"
        start_github_group "${header}"
        echo -e "### ${header} ###\n"
        stop_github_group

        TAGS=",repeat:${CI_REPEAT_RUNS},samples:${CI_SAMPLES},userenv:${userenv}"

        COMMON_ENDPOINT_ARGS="controller-ip:${CONTROLLER_IP},host:${CI_ENDPOINT_HOST},user:${CI_ENDPOINT_USER}"
        if [ "${userenv}" != "default" ]; then
            COMMON_ENDPOINT_ARGS+=",userenv:${userenv}"
        fi
        COMMON_K8S_ENDPOINT_ARGS="unique-project:1"
        case "${CI_K8S_TYPE}" in
            "MICROK8S"|"GENERIC")
                COMMON_K8S_ENDPOINT_ARGS+=",kubeconfig:0"
                ;;
        esac

        case "${scenario}" in
            cyclictest)
                case "${CI_ENDPOINT}" in
                    k8s)
                        ENDPOINT_ARG="--endpoint k8s,${COMMON_ENDPOINT_ARGS},${COMMON_K8S_ENDPOINT_ARGS},client:1-2,server:1,cpu-partitioning:default:1,securityContext:client-1:${SCRIPT_DIR}/k8s-endpoint/securityContext-cyclictest.json,securityContext:client-2:${SCRIPT_DIR}/k8s-endpoint/securityContext-cyclictest.json"
                        ;;
                    remotehost)
                        ENDPOINT_ARG="--endpoint remotehost,${COMMON_ENDPOINT_ARGS},osruntime:client-1:podman,osruntime:client-2:chroot,osruntime:server-1:podman,client:1-2,server:1,cpu-partitioning:default:1"
                        ENDPOINT_ARG+=" --endpoint remotehost,${COMMON_ENDPOINT_ARGS},osruntime:chroot,profiler:1"
                    ;;
                esac

                run_cmd "crucible run cyclictest --tags run:1${TAGS} --num-samples ${CI_SAMPLES} --test-order s --mv-params ${SCRIPT_DIR}/mv-params/cyclictest-1.json ${ENDPOINT_ARG}"
                post_run_cmd

                if [ "${CI_REPEAT_RUNS}" == "yes" ]; then
                    run_cmd "crucible run cyclictest --tags run:2${TAGS} --num-samples ${CI_SAMPLES} --test-order r --mv-params ${SCRIPT_DIR}/mv-params/cyclictest-2.json ${ENDPOINT_ARG}"
                    post_run_cmd
                fi
                ;;
            oslat)
                case "${CI_ENDPOINT}" in
                    k8s)
                        ENDPOINT_ARG="--endpoint k8s,${COMMON_ENDPOINT_ARGS},${COMMON_K8S_ENDPOINT_ARGS},client:1-2,server:1,cpu-partitioning:default:1,securityContext:client-1:${SCRIPT_DIR}/k8s-endpoint/securityContext-oslat.json,securityContext:client-2:${SCRIPT_DIR}/k8s-endpoint/securityContext-oslat.json"
                        ;;
                    remotehost)
                        ENDPOINT_ARG="--endpoint remotehost,${COMMON_ENDPOINT_ARGS},osruntime:client-1:podman,osruntime:client-2:chroot,osruntime:server-1:podman,client:1-2,server:1,cpu-partitioning:default:1"
                        ENDPOINT_ARG+=" --endpoint remotehost,${COMMON_ENDPOINT_ARGS},osruntime:chroot,profiler:1"
                    ;;
                esac

                if [ "${CI_PARAM_MODE}" == "from-file" ]; then
                    # from-file param mode
                    sed -i "s|TAGS|${TAGS}|g" ${SCRIPT_DIR}/run-file/oslat.json
                    sed -i "s|SCRIPT_DIR|${SCRIPT_DIR}|g" ${SCRIPT_DIR}/run-file/oslat.json
                    sed -i "s|COMMON_ENDPOINT_ARGS|${COMMON_ENDPOINT_ARGS}|g" ${SCRIPT_DIR}/run-file/oslat.json
                    sed -i "s|COMMON_K8S_ENDPOINT_ARGS|${COMMON_K8S_ENDPOINT_ARGS}|g" ${SCRIPT_DIR}/run-file/oslat.json
                    run_cmd "crucible run oslat --from-file ${SCRIPT_DIR}/run-file/oslat.json"
                    post_run_cmd
                else
                    # mv-params param mode
                    run_cmd "crucible run oslat --tags run:1${TAGS} --num-samples ${CI_SAMPLES} --test-order s --mv-params ${SCRIPT_DIR}/mv-params/oslat-1.json ${ENDPOINT_ARG}"
                    post_run_cmd
                    if [ "${CI_REPEAT_RUNS}" == "yes" ]; then
                        run_cmd "crucible run oslat --tags run:2${TAGS} --num-samples ${CI_SAMPLES} --test-order r --mv-params ${SCRIPT_DIR}/mv-params/oslat-2.json ${ENDPOINT_ARG}"
                        post_run_cmd
                    fi
                fi
                ;;
            iperf)
                case "${CI_ENDPOINT}" in
                    k8s)
                        ENDPOINT_ARG="--endpoint k8s,${COMMON_ENDPOINT_ARGS},${COMMON_K8S_ENDPOINT_ARGS},client:1-2,server:1-2"
                        ;;
                    remotehost)
                        ENDPOINT_ARG="--endpoint remotehost,${COMMON_ENDPOINT_ARGS},osruntime:client-1:podman,osruntime:server-1:chroot,client:1,server:1"
                        ENDPOINT_ARG+=" --endpoint remotehost,${COMMON_ENDPOINT_ARGS},osruntime:chroot,profiler:1"
                        ;;
                esac

                run_cmd "crucible run iperf --tags run:1${TAGS} --num-samples ${CI_SAMPLES} --test-order s --mv-params ${SCRIPT_DIR}/mv-params/iperf-1.json ${ENDPOINT_ARG}"
                post_run_cmd

                if [ "${CI_REPEAT_RUNS}" == "yes" ]; then
                    run_cmd "crucible run iperf --tags run:2${TAGS} --num-samples ${CI_SAMPLES} --test-order r --mv-params ${SCRIPT_DIR}/mv-params/iperf-2.json ${ENDPOINT_ARG}"
                    post_run_cmd
                fi
                ;;
            fio)
                case "${CI_ENDPOINT}" in
                    k8s)
                        ENDPOINT_ARG="--endpoint k8s,${COMMON_ENDPOINT_ARGS},${COMMON_K8S_ENDPOINT_ARGS},client:1-2"
                        ;;
                    remotehost)
                        ENDPOINT_ARG="--endpoint remotehost,${COMMON_ENDPOINT_ARGS},osruntime:client-1:podman,osruntime:client-2:chroot,client:1-2"
                        ENDPOINT_ARG+=" --endpoint remotehost,${COMMON_ENDPOINT_ARGS},osruntime:chroot,profiler:1"
                        ;;
                esac

                run_cmd "crucible run fio --tags run:1${TAGS} --num-samples ${CI_SAMPLES} --test-order s --mv-params ${SCRIPT_DIR}/mv-params/fio-1.json ${ENDPOINT_ARG}"
                post_run_cmd

                if [ "${CI_REPEAT_RUNS}" == "yes" ]; then
                    run_cmd "crucible run fio --tags run:2${TAGS} --num-samples ${CI_SAMPLES} --test-order r --mv-params ${SCRIPT_DIR}/mv-params/fio-2.json ${ENDPOINT_ARG}"
                    post_run_cmd
                fi
                ;;
            uperf)
                case "${CI_ENDPOINT}" in
                    k8s)
                        ENDPOINT_ARG="--endpoint k8s,${COMMON_ENDPOINT_ARGS},${COMMON_K8S_ENDPOINT_ARGS},client:1-2,server:1-2"
                        ;;
                    remotehost)
                        ENDPOINT_ARG="--endpoint remotehost,${COMMON_ENDPOINT_ARGS},osruntime:client-1:podman,osruntime:server-1:chroot,client:1,server:1"
                        ENDPOINT_ARG+=" --endpoint remotehost,${COMMON_ENDPOINT_ARGS},osruntime:chroot,profiler:1"
                        ;;
                esac

                run_cmd "crucible run uperf --tags run:1${TAGS} --num-samples ${CI_SAMPLES} --test-order s --mv-params ${SCRIPT_DIR}/mv-params/uperf-1.json ${ENDPOINT_ARG}"
                post_run_cmd

                if [ "${CI_REPEAT_RUNS}" == "yes" ]; then
                    run_cmd "crucible run uperf --tags run:2${TAGS} --num-samples ${CI_SAMPLES} --test-order r --mv-params ${SCRIPT_DIR}/mv-params/uperf-2.json ${ENDPOINT_ARG}"
                    post_run_cmd
                fi
                ;;
        esac
    done

    run_cmd "df -h"
    case "${CI_ENDPOINT}" in
        k8s)
            case "${CI_K8S_TYPE}" in
                "MICROK8S")
                    if [ "${CRUCIBLE_CLIENT_SERVER_REPO_LOCATION}" == "microk8s" ]; then
                        run_cmd "remove_microk8s_images"
                    fi
                    ;;
            esac
            ;;
        remotehost)
            if [ "${CRUCIBLE_CLIENT_SERVER_REPO_LOCATION}" == "local" ]; then
                run_cmd "rm -Rfv ${CRUCIBLE_CLIENT_SERVER_REPO}/*"
            fi
            ;;
    esac
    run_cmd "df -h"
done

run_cmd "crucible ls --type run-id"

run_cmd "crucible ls --type tags"

run_cmd "crucible es init"

run_cmd "crucible es rebuild"

for scenario in $(echo "${CI_SCENARIOS}" | sed -e "s/,/ /g"); do
    run_cmd "crucible archive /var/lib/crucible/run/${scenario}*"

    run_cmd "crucible unarchive /var/lib/crucible/archive/${scenario}*"
done

run_cmd "crucible log info" "force"

run_cmd "crucible log view" "force"

run_cmd "podman ps --all --external" "force"

if [ "${CI_RUN_UPDATE}" == "yes" ]; then
    run_cmd "crucible update"
else
    echo "Skipping crucible update due to explicit user requested disablement"
fi

run_cmd "do_ssh ${CI_ENDPOINT_USER}@${CI_ENDPOINT_HOST} podman images" "force"

case "${CI_ENDPOINT}" in
    k8s)
        run_cmd "do_ssh ${CI_ENDPOINT_USER}@${CI_ENDPOINT_HOST} kubectl get nodes --output=wide" "force"

        run_cmd "do_ssh ${CI_ENDPOINT_USER}@${CI_ENDPOINT_HOST} kubectl get namespaces --output=wide" "force"

        run_cmd "do_ssh ${CI_ENDPOINT_USER}@${CI_ENDPOINT_HOST} kubectl get pods --all-namespaces --output=wide" "force"

        case "${CI_K8S_TYPE}" in
            "MICROK8S")
                if [ "${CRUCIBLE_CLIENT_SERVER_REPO_LOCATION}" == "microk8s" ]; then
                    run_cmd "do_ssh ${CI_ENDPOINT_USER}@${CI_ENDPOINT_HOST} microk8s ctr images list" "force"
                fi
                ;;
        esac
        ;;
    remotehost)
        if [ "${CRUCIBLE_CLIENT_SERVER_REPO_LOCATION}" == "local" ]; then
            run_cmd "ls -laR ${CRUCIBLE_CLIENT_SERVER_REPO}" "force"
        fi
        ;;
esac

run_cmd "df -h" "force"

if [ "${CI_RUN_ENVIRONMENT}" == "github" ]; then
    start_github_group "Artifact Processing"
    if pushd /var/lib > /dev/null; then
        if [ ! -d "crucible" ]; then
            echo "ERROR: /var/lib/crucible does not exist for creating an artifact"
            exit 1
        fi

        tarball="crucible-ci-artifact_$(uuidgen).tar"
        echo "Creating ${tarball} from /var/lib/crucible"
        if tar -cf ${tarball} crucible; then
            echo "Compressing ${tarball} with xz"
            if ! xz -v -T0 ${tarball}; then
                echo "ERROR: Failed to xz compress ${tarball}"
                exit 1
            fi
        else
            echo "ERROR: Failed to create tar archive of /var/lib/crucible"
            exit 1
        fi

        popd > /dev/null
    else
        echo "ERROR: Could not pushd to /var/lib"
        exit 1
    fi
    stop_github_group

    start_github_group "Return code processing"
    stage1_exit_status_file="/tmp/run-ci-stage1-exit-status"
    echo "Logging stage 1 exit status ${RC_STATUS} to ${stage1_exit_status_file}"
    echo "${RC_STATUS}" > ${stage1_exit_status_file}
    stop_github_group

    exit 0
elif [ "${CI_RUN_ENVIRONMENT}" == "standalone" ]; then
    echo "Stage 1 exiting with status ${RC_STATUS}"
    exit ${RC_STATUS}
fi
